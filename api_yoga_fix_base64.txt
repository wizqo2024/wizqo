import express from 'express';
import cors from 'cors';

const app = express();

// Middleware
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://wizqo.com', 'https://www.wizqo.com', 'https://www.wizqo.com']
    : ['http://localhost:3000', 'http://localhost:5000'],
  credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'Wizqo API is running',
    timestamp: new Date().toISOString()
  });
});

// Generate plan endpoint (main functionality)
app.post('/api/generate-plan', async (req, res) => {
  try {
    const { hobby, experience, timeAvailable, goal } = req.body;
    
    if (!hobby || !experience || !timeAvailable) {
      return res.status(400).json({ 
        error: 'Missing required fields: hobby, experience, timeAvailable' 
      });
    }

    // Fallback plan generation for production deployment
    const plan = {
      hobby: hobby.charAt(0).toUpperCase() + hobby.slice(1),
      title: `Master ${hobby.charAt(0).toUpperCase() + hobby.slice(1)} in 7 Days`,
      overview: `A comprehensive ${hobby} learning plan tailored for ${experience === 'some' ? 'intermediate' : experience} learners`,
      difficulty: experience === 'some' ? 'intermediate' : experience,
      totalDays: 7,
      days: Array.from({ length: 7 }, (_, i) => {
        const dayNumber = i + 1;
        const dailyTopics = [
          { focus: 'Basics & Setup', task: 'Get familiar with fundamentals and set up your practice space' },
          { focus: 'Core Techniques', task: 'Master the essential techniques that form the foundation' },
          { focus: 'Building Skills', task: 'Develop coordination and muscle memory through practice' },
          { focus: 'Practical Application', task: 'Apply what you\'ve learned in real-world scenarios' },
          { focus: 'Advanced Elements', task: 'Introduce more challenging concepts and variations' },
          { focus: 'Creative Expression', task: 'Explore creativity and personal style in your practice' },
          { focus: 'Integration & Mastery', task: 'Combine all elements and plan your continued journey' }
        ];
        
        const dayTopic = dailyTopics[i];
        const dayTitle = `${hobby.charAt(0).toUpperCase() + hobby.slice(1)} ${dayTopic.focus} - Day ${dayNumber}`;
        
        // Use specific hobby-related video IDs from popular educational channels
        const videoIds = {
          drawing: ['1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U'],
          guitar: ['1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U'],
          cooking: ['1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U'],
          yoga: ['v7AYKMP6rOE', 'v7AYKMP6rOE', 'v7AYKMP6rOE', 'v7AYKMP6rOE', 'v7AYKMP6rOE', 'v7AYKMP6rOE', 'v7AYKMP6rOE'],
          photography: ['1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U', 'V3WmrWUEIJo', '1EPNYWeEf1U']
        };
        
        const hobbyVideos = videoIds[hobby.toLowerCase()] || videoIds.drawing;
        const videoId = hobbyVideos[i] || 'ewJNyS9pe-Y';

        return {
          day: dayNumber,
          title: dayTitle,
          mainTask: `${dayTopic.task} with focused practice and hands-on learning.`,
          explanation: `Day ${dayNumber} focuses on ${dayTopic.focus.toLowerCase()} in ${hobby}. You'll work on essential skills while building on everything you've learned so far.`,
          howTo: [
            `Begin with ${dayTopic.focus.toLowerCase()} fundamentals`,
            `Practice the day's core techniques step-by-step`,
            `Complete ${dayNumber <= 3 ? 'foundational' : dayNumber <= 5 ? 'intermediate' : 'advanced'} exercises for ${experience} level`,
            `Apply today's skills in practical ${hobby} scenarios`,
            `Review progress and prepare for tomorrow's challenges`
          ],
          checklist: [
            `${hobby.charAt(0).toUpperCase() + hobby.slice(1)} equipment ready and organized`,
            `Practice area set up for ${dayTopic.focus.toLowerCase()} work`,
            `${dayNumber <= 3 ? 'Basic reference materials' : dayNumber <= 5 ? 'Intermediate guides' : 'Advanced resources'} available`,
            `Timer set for focused ${dayTopic.focus.toLowerCase()} practice`,
            `Progress tracking system ready for Day ${dayNumber}`
          ],
          tips: [
            `Take time to properly understand each concept`,
            `Quality practice beats quantity every time`,
            `Be patient with your learning process`,
            `Don't be afraid to repeat difficult parts`
          ],
          commonMistakes: [
            `Rushing through exercises without understanding concepts`,
            `Skipping practice time or cutting sessions short`,
            `Not taking notes or tracking your improvement`
          ],
          freeResources: [{
            title: dayTitle,
            link: `https://youtube.com/watch?v=${videoId}`
          }],
          affiliateProducts: [{
            title: `${hobby.charAt(0).toUpperCase() + hobby.slice(1)} ${dayNumber <= 3 ? 'Beginner' : dayNumber <= 5 ? 'Intermediate' : 'Advanced'} Kit`,
            link: `https://amazon.com/dp/B${dayNumber}${i + 2}34?tag=wizqo-20`
          }],
          youtubeVideoId: videoId,
          videoTitle: dayTitle,
          estimatedTime: timeAvailable,
          skillLevel: experience
        };
      })
    };

    res.json(plan);
  } catch (error) {
    console.error('Error generating plan:', error);
    res.status(500).json({ error: 'Failed to generate learning plan' });
  }
});

// Contact endpoint
app.post('/api/contact', async (req, res) => {
  try {
    const { name, email, message } = req.body;
    
    if (!name || !email || !message) {
      return res.status(400).json({ 
        error: 'Missing required fields: name, email, message' 
      });
    }

    // Simple success response for production
    res.json({ 
      success: true, 
      message: 'Thank you for your message! We will get back to you soon.' 
    });
  } catch (error) {
    console.error('Contact form error:', error);
    res.status(500).json({ error: 'Failed to send message' });
  }
});

// Basic API routes
app.get('/api/test', (req, res) => {
  res.json({ message: 'API is working!' });
});

// Export for Vercel (ES module syntax)
export default app;